Adam Jaffe
amj2158
4.28.13
Intro Python
Professor Cannon

	I relied on the framework Professor Cannon gave us to complete this assignment. My main function first calls the function make_zip(csv). make_zip reads each line of the .csv file and converts that information into a dictionary. Then, once the information is stored as a dictionary, that dictionary is added to a list called zip_list. When the function is finished running, zip_list contains every zip code and its accompanying information in dictionary form.
	Next, my function calls tweets_list(). tweets_list opens a file of tweets and creates a .txt file to log errors.  Then, for every line in the file of tweets, the function make_tweet is called. make_tweet, like make_zip, takes information about a tweet from a .txt file and converts that information into a dictionary. If the tweet is not formatted correctly or is missing information, it is logged as an error and an empty dictionary is returned. Once a properly-formatted tweet is returned as a dictionary, tweets_list appends it to the list of tweets. In the case of improper formatting, tweets_list ignores the empty dictionary it is given. When tweets_list is done running, it returns tweets, a list of al the tweets in the infile stored as dictionaries.
	Then, for every entry in tweets (i.e. for every tweet), several functions are called. First is the tweet_location function, which takes the tweet dictionary and returns its location (its latitude and longitude) as a tuple. Second is the find_zip function, which takes the latitude/longitude tuple and the list of zip_codes. For every zip code listed in zip_list, find_zip returns its latitude and longitude as a tuple. It then gives the geo_distance function both location tuples. geo_distance uses the haversine method to calculate the distance between the two locations and returns this to find_zip. If that location / zip code is closer to the tweet than the previous estimate, it is designated as the likely zip code, and its state is designated as the likely state. Once no closer zip code is found, the likely zip code and the likely state are packaged as a tuple and returned as geo_info. Third is the add_geo function, which takes that geo_info and adds it to the tweet's dictionary file under the keys 'state' and 'zip'. When add_geo is done running, every tweet in the list tweets has had a corresponding zip code and state added, and the amended list is called geo_tweets. Fourth is the write_tweets function, which opens an outfile called tweets.txt. Every tweet in geo_tweets is converted to a string and written to the outfile. 
	The only functions I wrote besides those specified by Professor Cannon were the tweets_list function and the main function. 
	My function is easy to use: the user must only give it the name of a .txt file containing tweets in the required format.
