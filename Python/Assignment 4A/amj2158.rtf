{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 My program gives the user two options: test a file of 1s and 0s for vertical percolation or generate a random grid and test that for vertical percolation. If the user chooses the first option, the program requests the file, saves its size as the variable N, and performs three successive tasks: convert the file from 1s and 0s to an array of True/False values, assign each site in that array with a value for being open, blocked, or filled, and use those assignments to test for vertical percolation. If the user chooses the second option, the program asks for two variables, the size N of the random array and the probability p that any site is open initially. It uses these specifications to generate an array of 1s and 0s. This array is written to a file called integers.txt and is then carried through the same transformations as the array in choice 1.\
\
The component functions of my program work as follows:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}boolean_converter takes a .txt file specified by the user and converts it to a numpy array of True and False values. I used the numpy.zeros method to generate a square array; this method also allows you to specify the data type of each entry, so I specified Booleans. I then read through each remaining line in the user .txt file and saved it as a Boolean into a new array called file_array.\
{\listtext	\'95	}integer_writer is basically the opposite of boolean_converter: it takes an array of Boolean values and writes it into a .txt file as 1s and 0s. It does this by creating a temporary list for each line of the array, converting each value in the array to a 1 or a 0, and appending that number to the list. The list is then converted to a string and written to an outfile called integers.txt. \
{\listtext	\'95	}value_assigner takes an array of True/False values and determines whether a given site is blocked, open, or filled. It evaluates the top row first: any True value there is filled regardless of what values surround it, so it is given a value 1. Additionally, any site with a False value is blocked, irrespective of its surroundings. Those are given the value 0. Last, each site in the remaining lines of the array is tested to see if it meets two conditions: that it is open, and that the site above it is filled. If this is the case, the site is filled and is given a value 1. The new array is returned.\
{\listtext	\'95	}percolates_or_not takes the array generated by value_assigner and tests it for percolation. It does this by checking the last row of the array for non-zero values. If one is found, it means that a whole column of the array is filled, and the system percolates.\
{\listtext	\'95	}simulator takes the variables p and N specified by the user and creates a random array of open or closed sites. First, it creates an array of 0s of size N. For each site in the array, a random number between 0 and 1 is generated using random.random. If that value is less than p, then that site is assigned the Boolean value True (i.e. it is open).\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
To use the program, choose either of the two options by entering a 1 or a 2. If you choose 1, specify the input file to be tested and the program will tell you whether or not it percolates. If you choose 2, specify p by entering a decimal value and specify the length of the array by entering an integer value. \
}