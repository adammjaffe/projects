def main():
    import numpy as np

    # Print a standard greeting and menu.
    print 'Welcome to the Vertical Percolation Testing Program!'
    print '                 MENU'
    print '1) Test an input file for percolation.'
    print '2) Test a random array for percolation.'

    # Find the user's preference.
    choice=input('Which would you like to do? Enter 1 or 2.')

    # Perform the appropriate functions.
    if choice==1:
        # Open the necessary read file.
        infile=open(raw_input('Input file name:'), 'r')
        
        # The first line specifies the height and width N of the square matrix.
        line1=infile.readline()
        N=int(line1)

        # Run a series of functions to convert the .txt file into an array
        # of True and False values, tag sites as blocked, full, or empty, and
        # determine if the array percolates.
        file_array=boolean_converter(np,N,infile)
        file_array=value_assigner(file_array,N)
        percolates_or_not(file_array,N)

    if choice==2:
        # Get necessary user input.
        p=input('What is the probability that each site will be open?')
        N=input('How big is the array?')

        # Run a series of functions to create a simulated array according to
        # the user's specifications, tag sites as blocked, full, or empty, 
        # determine if the array percolates, and write it as a .txt file.
        file_array=simulator(np,N,p)
        integer_writer(file_array)
        file_array=value_assigner(file_array,N)
        percolates_or_not(file_array,N)

def boolean_converter(np,N,infile):
    '''This converts a .txt file of 1s and 0s into an array of True and''' \
            '''False values'''
    # Create an 'empty' 1D array of the appropriate size.
    file_array=np.zeros((N,N),bool)
    
    # For each of the remaining rows in the square matrix, read a line and
    # store it as a list temporarily.
    for j in range(1,N+1):
        line=infile.readline()
        line_list=line.split()

        # Convert each item in the line from a 1 or a 0 to a Boolean.
        for k in range(0,len(line_list)):
            if line_list[k]=='0':
                line_list[k]=False
            else:
                line_list[k]=True

            # Write the Boolean value into the correct place in the array.
            file_array[j-1][k]=line_list[k]

    return file_array

def integer_writer(file_array):
    '''This reads an array of Boolean values and writes a .txt file of'''\
            '''1s and 0s.'''
    # Open the write file.
    outfile=open('integers.txt','w')
    
    # Find the size of the array and write that into the outfile.
    N=len(file_array)
    outfile.write(str(N)+'\n')

    for i in range(N):
        # Create a list to temporarily save the integers for the new line.
        temp_list=[]
        for j in range(N):
            # Convert True into 1 and False into 0.
            if file_array[i][j]==True:
                temp_list.append('1')
            else:
                temp_list.append('0')

        # Add a new line marker.
        temp_list.append('\n')

        # Convert the list to a string with proper spacing.
        line=' '.join(temp_list)

        # Write the line to the outfile.
        outfile.write(line)
        
def value_assigner(file_array,N):
    '''This reads an array outputted by the reading function and assigns'''\
            '''values to the various spots of the array depending on if'''\
            '''they are blocked, full, or empty.'''
    # A site with a True tag on the top row is filled and is given a value
    # of 1.
    for i in range(0,N):
        if file_array[0][i]==True:
            file_array[0][i]=1
            
    # A site with a False tag is blocked and is given a value of 0.
    for i in range(0,N):
        for j in range(0,N):
            if file_array[i][j]==False:
                file_array[i][j]=0
           
    # A site with a True tag and a filled site above it is filled; otherwise,
    # it is empty.
    for i in range(1,N):
        for j in range(0,N):
            if (file_array[i][j]==1 and file_array[i-1][j]==1):
                file_array[i][j]=1
            else:
                file_array[i][j]=0

    return file_array

def percolates_or_not(file_array,N):
    '''This takes the array generated by value_assigner and determines if'''\
            '''percolation occurs.'''
    # Create a counting variable for the bottom row of the array.
    counter=0

    # Find the sum of values in the bottom row of the array.
    for i in range(0,N):
        counter=counter+file_array[N-1][i]

    # If the sum of the bottom row is greater than 0, it means at least one
    # column percolates vertically, so the system as a whole does.
    if counter>0:
        print 'The system percolates vertically.'
        return True
    else:
        print 'The system does not percolate vertically.'
        return False

def simulator(np,N,p):
    import random as r

    # Generate an NxN matrix temporarily full of zeros.
    simulated_array=np.zeros((N,N),bool)

    # Using random.random, fill the sites with 1s or 0s.
    for i in range(0,N):
        for j in range(0,N):
            val=r.random()
            if val<p:
                simulated_array[i][j]=True
            else:
                simulated_array[i][j]=False

    return simulated_array
    
main()
